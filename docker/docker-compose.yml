version: '3.5'

services:
  # --------------
  # registry
  # --------------
  discovery:
    build: ../registry/target
    ports:
      - "8761:8761"
    networks:
      - discovery
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  # --------------
  # mysql-container
  # --------------
  mysql-container:
    container_name: mysql-container
    image: mysql
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    environment:
     # MYSQL_DATABASE: 'product'
      # So you don't have to use root, but you can if you like
     # MYSQL_USER: 'springuser'
      # You can use whatever password you like
     # MYSQL_PASSWORD: 'timao'
      # Password for root access
       MYSQL_ROOT_PASSWORD: 'root'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    networks:
      - mysql-network
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/data:/var/lib/mysql
  # --------------
  # ZOOKEEPER proxy
  # --------------
  zookeeper:
    image: "confluentinc/cp-zookeeper:5.2.1"
    networks:
      - discovery
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # --------------
  # kafka proxy
  # --------------
  kafka:
    image: "confluentinc/cp-enterprise-kafka:5.2.1"
    hostname: kafka
    ports:
      - '9092:9092'
      - '29094:29094'
    depends_on:
      - zookeeper
    networks:
      - discovery
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: DOCKER_HOST://kafka:29092,EXTERNAL_HOST://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_HOST://kafka:29092,EXTERNAL_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_HOST:PLAINTEXT,EXTERNAL_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_HOST
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "TRUE"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
  kafkacat:
    image: confluentinc/cp-kafkacat
    command: sleep infinity
         
  # --------------
  # zuul proxy
  # --------------
  zuul:
    build: ../proxy/target
    ports:
      - "80:8080"
    expose:
      - "8080"
    networks:
      - discovery
    links:
      - discovery
    depends_on:
      - wishlist
      - support
      - cart
      - product
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # --------------
  # product
  # --------------
  product:
    build: ../product/target
    restart: always
    ports:
      - "8080"
    networks:
      - mysql-network
      - discovery
    links:
      - discovery
      - kafka
      - mysql-container
    depends_on:
      - mysql-container
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  # --------------
  # wishlist
  # --------------
  wishlist:
    build: ../wishlist/target
    restart: always
    ports:
      - "8080"
    networks:
      - mysql-network
      - discovery
    links:
      - discovery
      - kafka
      - mysql-container
    depends_on:
      - mysql-container
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  # --------------
  # cart
  # --------------
  cart:
    build: ../cart/target
    restart: always
    ports:
      - "8080"
    networks:
      - mysql-network
      - discovery
    links:
      - discovery
      - kafka
      - mysql-container
    depends_on:
      - mysql-container
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  # --------------
  # support
  # --------------
  support:
    build: ../support/target
    restart: always
    ports:
      - "8080"
    networks:
      - mysql-network
      - discovery
    links:
      - discovery
      - kafka
      - mysql-container
    depends_on:
      - mysql-container
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
# Names our volume
#volumes:
 # my-db:
networks:
  #network for eureka discovery
  discovery:
    driver: bridge
  #mysqlnetwork
  mysql-network:
    driver: bridge